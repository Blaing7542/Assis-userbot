import random
import asyncio
import time
import tgcrypto
import pyrogram
from pyrogram import Client, filters
from pytube import YouTube

api_id = '–∞–ø–∏ –∏–¥'
api_hash = '–∞–ø–∏ —Ö–µ—à'  # Api ID –∏ Api Hash –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ https://my.telegram.org/apps.

app = Client("my_bot", api_id=api_id, api_hash=api_hash)

blacklist = []

open("bldb.txt", "a").close()

with open("bldb.txt", "r") as file:
    for line in file:
        user_id = int(line.strip())
        blacklist.append(user_id)

@app.on_message(filters.command("help", prefixes="."))
async def help_command(_, message):
    await message.edit_text("**–ö–æ–º–∞–Ω–¥—ã:**\n`.bull` - –±—É–ª–ª–∏–Ω–≥\n`.info` - –∏–Ω—Ñ–æ –æ —é–±\n`.doubletext` - —É–¥–≤–∞–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç. –ø—Ä–∏–º–µ—Ä: *–ø–ø—Ä—Ä–∏–∏–≤–≤–µ–µ—Ç—Ç!*\n`.ping` - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ —é–±\n`.caz` - –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É –Ω–∞ —á—Ç–æ-—É–≥–æ–¥–Ω–æ. –ø—Ä–∏–º–µ—Ä: *.caz 2 –¥–æ–ª–ª–∞—Ä–∞*\n`.downvid` - —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`.addbl` - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –û–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤–∞—à–µ–≥–æ —é–±.\n`.delbl` - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n`.animtext` - –∞–Ω–∏–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç.")

@app.on_message(filters.command("bull", prefixes="."))
async def bull_command(_, message):
    if message.from_user.id in blacklist:
        await message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        return

    bull_variants = [
        "–ü–æ–ª–∏—Ä—É–π –º–æ–∏ —è–π—Ü–∞, –æ–ª—É—Ö.",
        "–Ø —Ç–≤–æ—é –º–∞–º—É –±—É–º –±—É–º",
        "–¢–µ—Ä–ø–∏–ª—É –æ–±–æ—Å–∞–Ω–Ω–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏",
        "–ú–∞–º–µ –±—É–¥–µ—à—å —Ç–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å",
        "–ü–æ—à—ë–ª –Ω–∞—Ö—É–π",
        "–°–ª—ã—à—å —Ç—ã, —á–µ—Ä–∫–∞—à –æ–±–æ—Å–∞–Ω–Ω—ã–π, –º–∞–º–∫—É —Å–≤–æ—é –ø—Ä–æ–≤–µ—Ä–∏–ª? –û–Ω–∞ –≤ –º–æ–π —Å–ø–µ—Ä–º–µ)",
        "–ü–æ–º–Ω–∏—à—å, —Ç–µ–±–µ –¥–µ–≤—É—à–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∞ —Ü–µ–ª—ã–π –º–µ—Å—è—Ü? –û–Ω–∞ –≤—Å—ë –≤—Ä–µ–º—è —Å–æ—Å–∞–ª–∞ –º–æ–π —Ö—É–π, –∏ –º—ã –µ–±–∞–ª–∏—Å—å —Å –Ω–µ–π)",
        "–¢—ã —á—ë –∫–∞–∫ —Ç–≤–æ—è –º–∞—Ç—å? –û–Ω–∞ —Ö–æ—Ç—å-–±—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∞ —Ç—ã –∑–∞ –Ω–µ–π –ø–æ–≤—Ç–æ—Ä—è–µ—à—å - —Ö—É–π —Å–æ—Å—ë—à—å))",
        "–ß—É–º–∞ –≤–æ–ª–æ—Å–∞—Ç–∞—è, —Ç–µ–±—è –º–∞–º–∞ –≤ –¥–µ—Ç—Å—Ç–≤–µ –±–∏–ª–∞, —á—Ç–æ —Ç—ã —Ç–∞–∫–æ–π –∑–ª–æ–π?",
        "–ú—ã —Ç–≤–æ—é –º–∞–º—É –µ–±–∞–ª–∏ –≤—Å–µ–π –≥—Ä—É–ø–ø–æ–π, —Ä–∞–¥—É–π—Å—è))",
        "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏–ª–∏ *–≤–∏–ª–∫–æ–π –≤ –≥–ª–∞–∑ –∏–ª–∏ –≤ –ø–æ–ø—É —Ä–∞–∑?*, —Ç—ã –≤—ã–±—Ä–∞–ª –≤—Ç–æ—Ä–æ–µ))",
        "–ú—ã —Å —Ç–≤–æ–∏–º –æ—Ç—Ü–æ–º –º–∞–º—É –µ–±–∞–ª–∏. –û–Ω–∞ —Ç–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å–æ—Å—ë—Ç))",
        "–¢—ã –±–ª—è—Ç—å, —Å—ã–Ω —Ñ–µ—Ä–º–µ—Ä–∞, —Ç—ã –∫–∞–∫ —Å –æ—Ç—á–∏–º–æ–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å?",
        "–ú–Ω–µ —Ç–≤–æ–π –ø–∞–ø–∞ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –∫–æ–≥–¥–∞ –æ–Ω–∏ –µ–±–∞–ª–∏—Å—å, —Ç–æ –ø—Ä–µ–∑–∏–∫ –ø–æ—Ä–≤–∞–ª—Å—è))",
        "–ê —á–µ–≥–æ —Ç—ã –µ—â—ë –≤ —Å–µ—Ç–∏? –ú–∞–º–∞ –∂–µ —Å–∫–∞–∑–∞–ª–∞ –≤—ã–∫–ª—é—á–∞—Ç—å",
        "–≠–π —Ç—ã, —à–ª—é—Ö–∞, –ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å —è–π—Ü–∞ –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å?",
        "–ü–∏—Å—é–Ω—á–∏–∫ –µ—â—ë –Ω–µ –¥–æ—Ä–æ—Å –¥–æ —Ç–∞–∫–∏—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π",
        "–ö–æ–≥–¥–∞ —Ç—ã —É–∂–µ –≤—Å–ø–æ–º–Ω–∏—à—å, —á—Ç–æ –º–Ω–µ —Ö—É–π —Å–æ—Å–∞–ª?",
        "–¢—ã –º–æ–π —Å–µ–∫—Å —Ä–∞–±, –∞ —è —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü. –ë—ã—Å—Ç—Ä–æ —Å–æ—Å–∏ –º–Ω–µ —Ö—É–π!"
    ]

    await message.edit_text(random.choice(bull_variants))

@app.on_message(filters.command("info", prefixes="."))
async def info_command(_, message):
    await message.delete()
    await app.send_photo(
        chat_id=message.chat.id,
        photo="https://user-images.githubusercontent.com/127663348/259346080-504b2ac5-9182-4151-aed6-8f5a99fcac13.png",
        caption="**‚ú®Assis by Blaing**\n__üîßVersion: 1.2__\nSource: https://github.com/Blaing7542/Assis-userbot\n**Version for user‚ù§**"
    )

@app.on_message(filters.command("ping", prefixes="."))
async def ping_pong(_, message):
    start_time = time.time()
    pong_message = await message.reply_text("–ü–æ–Ω–≥!")
    end_time = time.time()
    ping_time = round((end_time - start_time) * 1000, 1)
    await message.delete()
    await pong_message.edit_text(f"–ü–æ–Ω–≥! –ü–∏–Ω–≥: {ping_time}ms")

@app.on_message(filters.command("doubletext", prefixes="."))
async def animtext_command(_, message):
    text = message.text.split(".doubletext ", 1)[1]
    animated_text = ""
    for char in text:
        animated_text += char + char
    await message.edit_text(animated_text)

@app.on_message(filters.command("caz", prefixes="."))
async def caz_command(_, message):
    await asyncio.sleep(4)
    bet = message.text.split(".caz ", 1)[1]
    try:
        bet_amount, bet_text = bet.split(maxsplit=1)
        bet_amount = int(bet_amount)
        if bet_amount <= 0:
            await message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
    except (ValueError, IndexError):
        await message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞!")
        return

    result = random.choice([0, 1])
    if result == 0:
        loss_amount = bet_amount
        await message.reply_text(f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {loss_amount} {bet_text}")
    else:
        win_amount = bet_amount * 2
        await message.reply_text(f"–í—ã–∏–≥—Ä—ã—à! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} {bet_text}")

@app.on_message(filters.command("ping_all", prefixes="."))
async def ping_all_command(_, message):
    if message.from_user.id == your_id:  # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞.
        await message.reply_text("**–≤—ã—Ä–µ–∑–∞–Ω–æ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ https://github.com/Blaing7542/Ping-all-userbot**")
    else:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@app.on_message(filters.command("nuke", prefixes="."))
async def nuke_command(_, message):
    if message.from_user.id == your_id:  # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞.
        await message.reply_text("**–≤—ã—Ä–µ–∑–∞–Ω–æ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ https://github.com/Blaing7542/Ping-all-userbot**")
    else:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@app.on_message(filters.command("addbl", prefixes="."))
async def add_blacklist_command(_, message):
    if message.from_user.id == your_id:  # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞.
        user_id = message.reply_to_message.from_user.id
        if user_id not in blacklist:
            blacklist.append(user_id)
            with open("bldb.txt", "a") as file:
                file.write(str(user_id) + "\n")
            await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤–∞—à–µ–≥–æ —é–±.")
        else:
            await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
    else:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@app.on_message(filters.command("delbl", prefixes="."))
async def remove_blacklist_command(_, message):
    if message.from_user.id == your_id:  # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞.
        user_id = message.reply_to_message.from_user.id
        if user_id in blacklist:
            blacklist.remove(user_id)
            with open("bldb.txt", "w") as file:
                for id in blacklist:
                    file.write(str(id) + "\n")
            await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        else:
            await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
    else:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@app.on_message(filters.command("downvid", prefixes="."))
async def download_video_command(_, message):
    query = message.text.split(".downvid ", 1)[1]
    try:
        video = YouTube(query)
        video.streams.get_highest_resolution().download()
        await app.send_video(
            chat_id=message.chat.id,
            video="video.mp4",
            caption="–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
        )
    except Exception as e:
        await message.reply_text(f"–í–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ–¥")

@app.on_message(filters.command("animtext", prefixes='.') & filters.me)
async def animtext_command(_, message):
    input_text = message.text.split(".animtext ", maxsplit=1)[1]
    temp_text = input_text
    edited_text = ""
    typing_symbol = "‚ñà"

    while edited_text != input_text:
        try:
            await message.edit(edited_text + typing_symbol)
            time.sleep(0.1)
            edited_text = edited_text + temp_text[0]
            temp_text = temp_text[1:]
            await message.edit(edited_text)
            time.sleep(0.1)
        except FloodWait:
            print("—á—Ç–æ")

app.run()
